@page "/countries/edit/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlterService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar país</h3>

@if (country is null)
{
    <Loading />
}
else
{
    <CountryForm @ref="countryForm" Country="country" OnValidSubmit="SaveAsync" ReturnAction="Return" />

}

@code {
    private Country? country;
    private CountryForm? countryForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var response = await repository.GetAsync<Country>($"api/countries/{Id}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                Return();
            }
            var message = await response.GetErrorMessageAsync();
            await sweetAlterService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;

        }
        country = response.Response;

    }
    private async Task SaveAsync()
    {
        var response = await repository.PutAsync($"/api/countries", country);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlterService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Return();
        var toast = sweetAlterService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");

    }
    private void Return()
    {
        countryForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/countries");
    }
}