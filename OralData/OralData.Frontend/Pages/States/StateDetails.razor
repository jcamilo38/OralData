@page "/states/details/{StateId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (state is null)
{
    <Loading />
}
else
{
<h3>@state.Name</h3>
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-home"></i> Ciudades
                <a class="btn btn-sm btn-primary float-end" href="/cities/create/@StateId"><i class="oi oi-plus"></i> Nueva Ciuda</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar ciudad..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                    <a class="btn btn-success" href="/countries/details/@state.CountryId">Regresar</a>
                </div>
            </div>

            <Pagination CurrentPage="currentPage"
                        TotalPages="totalPages"
                        SelectedPage="SelectedPageAsync" />

            <GenericList MyList="cities!">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Ciudad</th>
                                <th style="width:168px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var city in cities!)
                            {
                                <tr>
                                    <td>
                                        @city.Name
                                    </td>
                                    <td>
                                        <a class="btn btn-warning btn-sm" href="/cities/edit/@city.Id"><i class="oi oi-pencil" />Editar</a>
                                        <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(city))><i class="oi oi-trash" />Borrar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>
}

@code {
    private State? state;
    private List<City>? cities;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int StateId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadStateAsync();
        if (ok)
        {
            ok = await LoadCitiesAsync(page);
            if (ok)
            {
                await LoadPagesAsync();
            }
        }
    }

    private async Task LoadPagesAsync()
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/cities/totalPages?id={StateId}";
        }
        else
        {
            url = $"api/cities/totalPages?id={StateId}&filter={Filter}";
        }

        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }


    private async Task<bool> LoadCitiesAsync(int page)
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/cities?id={StateId}&page={page}";
        }
        else
        {
            url = $"api/cities?id={StateId}&page={page}&filter={Filter}";
        }

        var response = await repository.GetAsync<List<City>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        cities = response.Response;
        return true;
    }

    private async Task<bool> LoadStateAsync()
    {
        var response = await repository.GetAsync<State>($"api/states/{StateId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return false;
            }

            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        state = response.Response;
        return true;
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task DeleteAsync(City city)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Realmente deseas eliminar la ciudad? {city.Name}",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"/api/cities/{city.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.BottomEnd,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}