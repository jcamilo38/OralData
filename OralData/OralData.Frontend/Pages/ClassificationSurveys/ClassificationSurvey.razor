@page "/classificationsurvey"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

@if (loading)
{
    <Loading />
}
else
{
    <EditForm Model="classificationSurveyDTO" OnValidSubmit="SendClassificationInfo">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <span>
                    <i class="oi oi-person" /> Diligenciar encuesta de clasificacion
                    <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-check" /> Diligenciar</button>
                </span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        <div class="mb-3">
                            <label>Sintomas:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@classificationSurveyDTO.Synthoms" />
                                <ValidationMessage For="@(() => classificationSurveyDTO.Synthoms)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Severidad de los sintomas:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@classificationSurveyDTO.SeverityOfSymptoms" />
                                <ValidationMessage For="@(() => classificationSurveyDTO.SeverityOfSymptoms)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Historial médico relevante:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@classificationSurveyDTO.RelevantMedicalHistory" />
                                <ValidationMessage For="@(() => classificationSurveyDTO.RelevantMedicalHistory)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Otros detalles:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@classificationSurveyDTO.OtherDetails" />
                                <ValidationMessage For="@(() => classificationSurveyDTO.OtherDetails)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {

    private UserDTO userDTO = new();
    private ClassificationSurveyDTO classificationSurveyDTO = new();
    private bool loading;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsAdmin { get; set; }

    [Parameter]
    public int ClassificationSurveyId { get; set; }

    protected override async Task OnInitializedAsync()
    {
    }


    private async Task SendClassificationInfo()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres guardar la informacion?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var newClassificationSurveyDTO = new ClassificationSurveyDTO
            {

                Id = ClassificationSurveyId,
                Synthoms = classificationSurveyDTO.Synthoms,
                SeverityOfSymptoms = classificationSurveyDTO.SeverityOfSymptoms,
                RelevantMedicalHistory = classificationSurveyDTO.RelevantMedicalHistory,
                OtherDetails = classificationSurveyDTO.OtherDetails
            };

        var responseHTTP = await repository.PutAsync("api/ClassificationSurvey", newClassificationSurveyDTO);
        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        navigationManager.NavigateTo("/");
    }

}
