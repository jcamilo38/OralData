@page "/classificationsurvey"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

@if (loading)
{
    <Loading />
}
else
{
    <EditForm Model="classificationSurveyDTO" OnValidSubmit="CreteUserAsync">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <span>
                    <i class="oi oi-person" /> Diligenciar encuesta de clasificacion
                    <button class="btn btn-sm btn-primary float-end" type="submit"><i class="oi oi-check" /> Diligenciar</button>
                </span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        <div class="mb-3">
                            <label>Sintomas:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@classificationSurveyDTO.Synthoms" />
                                <ValidationMessage For="@(() => classificationSurveyDTO.Synthoms)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Severidad de los sintomas:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@classificationSurveyDTO.SeverityOfSymptoms" />
                                <ValidationMessage For="@(() => classificationSurveyDTO.SeverityOfSymptoms)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Historial médico relevante:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@classificationSurveyDTO.RelevantMedicalHistory" />
                                <ValidationMessage For="@(() => classificationSurveyDTO.RelevantMedicalHistory)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Otros detalles:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@classificationSurveyDTO.OtherDetails" />
                                <ValidationMessage For="@(() => classificationSurveyDTO.OtherDetails)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {

    private UserDTO userDTO = new();
    private ClassificationSurveyDTO classificationSurveyDTO = new();
    private List<Country>? countries;
    private List<State>? states;
    private List<City>? cities;
    private List<CourseEnrolled>? courses;
    private string? imageUrl;
    private bool loading;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCountriesAsync();
        await LoadCourseEnrolledAsync();

        if (!string.IsNullOrEmpty(userDTO.Photo))
        {
            imageUrl = userDTO.Photo;
            userDTO.Photo = null;
        }
    }

    private void ImageSelected(string imagenBase64)
    {
        userDTO.Photo = imagenBase64;
        imageUrl = null;
    }

    private async Task LoadCountriesAsync()
    {
        loading = true;
        var responseHttp = await repository.GetAsync<List<Country>>("/api/countries/combo");
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        countries = responseHttp.Response;
        loading = false;
    }

    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        var selectedCountry = Convert.ToInt32(e.Value!);
        await LoadStatesAsyn(selectedCountry);
        cities = null;
        userDTO.CityId = 0;
    }

    private async Task LoadStatesAsyn(int countryId)
    {
        var responseHttp = await repository.GetAsync<List<State>>($"/api/states/combo/{countryId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        states = responseHttp.Response;
    }

    private async Task StateChangedAsync(ChangeEventArgs e)
    {
        var selectedState = Convert.ToInt32(e.Value!);
        await LoadCitiesAsyn(selectedState);
        userDTO.CityId = 0;
    }

    private async Task LoadCitiesAsyn(int stateId)
    {
        var responseHttp = await repository.GetAsync<List<City>>($"/api/cities/combo/{stateId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        cities = responseHttp.Response;

    }

    private async Task CourseEnrolledAsync(ChangeEventArgs e)
    {
        var selectedCourse = Convert.ToInt32(e.Value!);

    }


    private async Task LoadCourseEnrolledAsync()
    {
        loading = true;
        var responseHttp = await repository.GetAsync<List<CourseEnrolled>>($"/api/CourseEnrolled/combo");
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        courses = responseHttp.Response;
        loading = false;
    }

    private async Task CreteUserAsync()
    {
        loading = true;
        userDTO.UserName = userDTO.Email;

        if (IsAdmin)
        {
            userDTO.UserType = UserType.Admin;
        }
        else
        {
            userDTO.UserType = UserType.Student;
        }

        var responseHttp = await repository.PostAsync<UserDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            loading = false;
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        loading = false;
        await sweetAlertService.FireAsync("Confirmación", "Su cuenta ha sido creada con éxito. Se te ha enviado un correo electrónico con las instrucciones para activar tu usuario.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/");
    }
}
