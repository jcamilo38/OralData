@page "/Login"
@using OralData.Shared.DTOs;
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<h3>Iniciar Sesión</h3>

<EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-4">
            <div class="mb-3">
                <label>Email:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@loginDTO.Email" />
                    <ValidationMessage For="@(() => loginDTO.Email)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Contraseña:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@loginDTO.Password" />
                    <ValidationMessage For="@(() => loginDTO.Password)" />
                </div>
            </div>
        </div>
        <div class="card-footer">
            <button class="btn btn-primary" type="submit">Iniciar Sesión</button>
            <p><a class="btn btn-link" href="/Register">¿No eres usuario aún? Resgitrate aquí</a></p>
            <p><a class="btn btn-link" href="/ResendToken">Reenviar correro de activación de cuenta</a></p>
            <p><a class="btn btn-link" href="/RecoverPassword">¿Has olvidado tu contraseña?</a></p>
        </div>
    </div>
</EditForm>

@code {
    private LoginDTO loginDTO = new();

    private async Task LoginAsync()
    {
        var responseHttp = await repository.PostAsync<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }
}
